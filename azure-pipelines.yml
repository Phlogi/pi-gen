# Use Azure Build Pipeline for automated rpi images
trigger:
  tags:
    include:
    - '*'
  branches:
    include:
    - master

variables:
  img_name: f2fsRaspbian
  # config options for pi-gen
  stage_list: 'stage0 stage1 stage2'
  rootfs_type: f2fs
  # AGENT_ALLOW_RUNASROOT: 1
  ArtifactFeed: dd4057ba-f9e2-42dd-8396-c97db4e37c84

pool:
  vmImage: 'ubuntu-18.04' # avoids tons of: 'qemu: Unsupported syscall: 383' error messages)

#container:
#    image: ubuntu:latest
    # options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
# fix for sudo
#  steps:
#    - script: |
#        /tmp/docker exec -t -u 0 ci-container \
#        sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
#      displayName: Set up sudo

steps:

- task: PowerShell@2
  displayName: Set date time stamp variable
  inputs:
    targetType: 'inline'
    script: |
      $Time = Get-Date
      $Time = $Time.ToUniversalTime()
      $date = $Time.ToString("yyyy-MM-dd HH:mmK")
      Write-Host "##vso[task.setvariable variable=datetimestamp]$date"
    errorActionPreference: 'continue'

# - task: CacheBeta@0
#  inputs:
#    key: '$(System.DefaultWorkingDirectory)/stage*/**'
#     path: '$(System.DefaultWorkingDirectory)/work, !**var/lock, !**rootfs/root'
#    cacheHitVar: CACHE_RESTORED
# example to skip if cache was restored 
# condition: ne(variables.CACHE_RESTORED, 'true')

- script: sudo dpkg --add-architecture i386 && sudo apt-get update && sudo apt-get install coreutils quilt parted qemu-user-static:i386 debootstrap zerofree zip dosfstools bsdtar libcap2-bin grep rsync xz-utils file git curl
  displayName: Install basic build dependencies

- script: pwd && ls -la && env && ls -la work/*/*/rootfs || true
  displayName: '[INFO] Check environment and paths'
  env: # these are not upper cased, in constrast to variables
    TESTVAR: testvalue

# MAIN Script call to build all specified stage in stage_list
- script: sudo -E ./build.sh
  displayName: Main Build (build.sh)

# alternative for container based  build
# - script: PRESERVE_CONTAINER=1 ./build-docker.sh

- script: |
    pwd
    mkdir -p work/x/y/rootfs || true
    sudo mkdir work/x/y/rootfs/root || true
    sudo chmod 700 work/x/y/rootfs/root || true
    ls -la work/x/y/rootfs/root || true
    sudo ls -la work/x/y/rootfs/root || true
    touch work/_dirty  || true
    mkdir -p deploy/test-date/subfolder/ || true
    touch deploy/test-date/subfolder/test.zip  || true
    echo "some content" >> deploy/test-date/subfolder/test.zip  || true
  displayName: '[TEST] Fake deployment + touching work dir'
  continueOnError: true
  condition: false

- script: ls -la deploy/ || true
  displayName: '[INFO] List deploy folder files'

- script: ls -la $(System.DefaultWorkingDirectory) && echo $(System.DefaultWorkingDirectory)
  displayName: '[INFO] List working directory'

# do not make the publish task below fail, in case only stage0 is built when testing the pipeline
- script: mkdir deploy || true
  displayName: Ensure deploy directory exists. 

- publish: '$(System.DefaultWorkingDirectory)/deploy'
  displayName: 'Publish artifact: images from deploy folder'
  artifact: deployable-images

- script: find $(System.DefaultWorkingDirectory)/deploy || true
  displayName: '[INFO] List contents of deploy dir'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(System.DefaultWorkingDirectory)/deploy'
    contents: '**' # recursive
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
    overWrite: true
    flattenFolders: false 
    preserveTimestamp: false 

- script: echo $(Build.ArtifactStagingDirectory) && find $(Build.ArtifactStagingDirectory)
  displayName: '[INFO] List contents of artifact staging directory'

- task: GithubRelease@0
  displayName: 'Create GitHub Release'
  inputs:
    isDraft: true
    title: 'Raspbian image with f2fs filesystem ($(datetimestamp))'
    gitHubConnection: phlogi-personal
    repositoryName: phlogi/pi-gen
    tagSource: manual
    tag: $(Build.BuildNumber)
    assets: |
        $(Build.ArtifactStagingDirectory)/** # recursive
#        $(Build.ArtifactStagingDirectory)/*.zip
#        $(Build.ArtifactStagingDirectory)/*.img
